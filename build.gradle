//----------------------------------------------------------------
//
//  Gradle project core configuration
//
//----------------------------------------------------------------

// Setup gradle and its plugins
plugins {
	// Setup gradle for java library builds
	id 'java-library'

	// // The one fat jar with dependencies (without shade)
	// id "com.github.onslip.gradle-one-jar" version "1.0.5"

	// Shadow plugin used to build the shade jar
	id 'com.github.johnrengelman.plugin-shadow' version '2.0.2'

	// jacoco code coverage for test
	id 'jacoco'
}

// Dependency providers to fetch from
repositories {
	// Use jcenter for resolving your dependencies.
	jcenter()

	// Alterantively maven central could be used instead
	mavenCentral()

	// You can declare any other Maven/Ivy/file repository here.
}

//----------------------------------------------------------------
//
//  Project versioning
//
//----------------------------------------------------------------

// The Project version
version = '4.1.0'

// Setup java compilation version
sourceCompatibility = 1.8
targetCompatibility = 1.8

//----------------------------------------------------------------
//
//  JavaCommons-core integration
//
//----------------------------------------------------------------

// JavaCommons core compilation
task buildJavaCommonsCore(type: GradleBuild) {
	buildFile = './JavaCommons-core/build.gradle'
	tasks = ['build']
}

// Dependency linkage of core project build
compileJava.dependsOn buildJavaCommonsCore

//----------------------------------------------------------------
//
//  Project dependencies
//
//----------------------------------------------------------------

// Dependencies used in the build
dependencies {
	
	// JavaCommons dependencies
	//---------------------------------------

	// Get and compile against the -all.jar lib file from javacommons core
	// note that compileOnly + testImplementation ensures this file is not included 
	// in any of the 3 jar builds, but still make it part of the test suite
	compileOnly fileTree(dir: './JavaCommons-core/build/libs', include: ['*-all.jar']) 
	testImplementation fileTree(dir: './JavaCommons-core/build/libs', include: ['*-all.jar']) 

	// This dependencies is exported to consumers, that is to say found on their compile classpath.
	//-------------------------------------------------------------------------------------------------------------------

	// OJDBC driver connection
	api files("./lib/jsql/ojdbc6.jar")    // for oracle
	api "org.xerial:sqlite-jdbc:3.21.0.1" // for sqlite
	api "mysql:mysql-connector-java:6.0.6"     // for mysql
	api "net.sourceforge.jtds:jtds:1.3.1" // for mssql

	// // Apache-commons
	// api "org.apache.commons:commons-lang3:3.7"
	// api "org.apache.commons:commons-text:1.2"
	// api "org.apache.commons:commons-collections4:4.1"
	// api "commons-io:commons-io:2.6"
	// api "commons-codec:commons-codec:1.11"

	// // JSON / XML processing
	// api "com.fasterxml.jackson.core:jackson-core:2.9.4"
	// api "com.fasterxml.jackson.core:jackson-databind:2.9.4"

	// This dependencies is used internally, and not exposed to consumers on their own compile classpath.
	//-------------------------------------------------------------------------------------------------------------------
	// implementation 'com.google.guava:guava:23.0'

	// Testing dependencies
	//-------------------------------------------------------------------------------------------------------------------
	testImplementation 'junit:junit:4.12'
	testImplementation 'com.carrotsearch:junit-benchmarks:0.7.2'

}

//----------------------------------------------------------------
//
//  Jar build steps
//
//----------------------------------------------------------------

//
// Base JAR build settings
//
// `gradle jar`
//
jar {
	// Archive name overwrite
	archiveName = project.name+"-"+project.version+""+".jar"
	description = "Build the "+archiveName+" with no dependencies"

	// Inherit the main jar manifest
	manifest {
		attributes(
			'Implementation-Title': project.name,
			'Implementation-Version': project.version
		)
	}
}

//
// Shadow jar - dependencies are shaded
//
// `gradle shadowJar`
//
shadowJar {
	// Archive name overwrite
	archiveName = project.name+"-"+project.version+"-shade"+".jar"
	description = "Build the "+archiveName+" with all dependencies shaded"

	// Inherit the main jar manifest
	manifest {
		inheritFrom project.tasks.jar.manifest
	}

	// Shade depencies under "picoded.shade"
	relocate "picoded", "picoded"
	relocate "org", "picoded.shade.org"
	relocate "com", "picoded.shade.com"
	relocate "oracle", "picoded.shade.oracle"
}

//
// Fat jar - dependencies are included, and not shaded
//
// `gradle shadowJar`
//
task fatJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	// Archive name overwrite
	archiveName = project.name+"-"+project.version+"-all"+".jar"
	description = "Build the "+archiveName+" with all dependencies"

	//
	// Note that the following is extended heavily from the default setup of shadowJar task
	// See : https://github.com/johnrengelman/shadow/blob/7ef6fc2699627f172b05a3bd3523201d63bb588f/src/main/groovy/com/github/jengelman/gradle/plugins/shadow/ShadowJavaPlugin.groovy#L38-L63
	//

	// NOTE : I dunno what this is - but it was setup in the default config
	conventionMapping.with {
		map('classifier') {
			'all'
		}
	}
	// Build from the main output
	from sourceSets.main.output
	// Load default configurations
	configurations = [project.configurations.findByName('runtimeClasspath') ? project.configurations.runtimeClasspath : project.configurations.runtime]
	// Inherit the main jar manifest
	manifest {
		inheritFrom project.tasks.jar.manifest
	}
	// Project dependencies libraries
	doFirst {
		def files = project.configurations.findByName(com.github.jengelman.gradle.plugins.shadow.ShadowBasePlugin.CONFIGURATION_NAME).files
		if (files) {
			def libs = [project.tasks.jar.manifest.attributes.get('Class-Path')]
			libs.addAll files.collect { "${it.name}" }
			manifest.attributes 'Class-Path': libs.findAll { it }.join(' ')
		}
	}
	// Exclude signed jar signatures?
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

	// Disable relocation
	relocate "picoded", "picoded"
	relocate "org", "org"
	relocate "com", "com"
	relocate "oracle", "oracle"
}

// Define the equivalent of buildAll
// for the build process done by "gradle build"
artifacts {
	archives fatJar
	archives shadowJar
	archives jar
}

//----------------------------------------------------------------
//
//  Concurent test threads
//
//----------------------------------------------------------------

test {
	// Exclude performance related test
	exclude "**/perf/*.java"
	exclude "**/perf/*_perf*"

	// For now - exclude mssql, and oracle test cases
	exclude "**/*Mssql*"
	exclude "**/*Oracle*"

	// Setup test to run on parllel threads = to number of processors by default
	if (project.hasProperty('maxParallelForks')) {
		maxParallelForks = project.maxParallelForks as int
	} else {
		// As our test tends to be io-blocked rather then cpu
		// we will run more tests in parallels
		maxParallelForks = (Runtime.runtime.availableProcessors() * 2) as int
	}
	
	// Set up the number of tests per fork
	if (project.hasProperty('forkEvery')) {
		forkEvery = project.forkEvery as int
	}
}

//----------------------------------------------------------------
//
//  Jacoco test coverage
//
//----------------------------------------------------------------

jacoco {
	toolVersion = "0.8.0"
}

jacocoTestReport {
	// Build the report
	reports {
		xml.enabled true
		csv.enabled true

		// Report format compatible with codeconv.io
		xml.destination "${buildDir}/reports/jacoco/report.xml"
		csv.destination "${buildDir}/reports/jacoco/report.csv"
	}
}

//----------------------------------------------------------------
//
//  Quick multibuild steps
//
//----------------------------------------------------------------

task buildAll {
	description = "Build all 3 jars: jar, shadowJar, fatJar"

	dependsOn jar
	dependsOn shadowJar
	dependsOn fatJar
}

task testAndBuildAll {
	description = "Performs the full test suite, then build all 3 jars: jar, shadowJar, fatJar"

	dependsOn jacocoTestReport
	dependsOn buildAll
}
